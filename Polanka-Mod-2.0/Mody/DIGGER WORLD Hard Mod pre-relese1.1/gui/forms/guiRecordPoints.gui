//-----------------------------------------------------------------------------
// ◦ Life is feudal ◦
//-----------------------------------------------------------------------------
function showRecordPointsDialog()
{
	if (!isObject(ServerConnection) || !isObject(ServerConnection.getControlObject()) || !ServerConnection.getControlObject().isInFlyingCameraMode())
	{
		echo("[RecordPoints] invalid player state");
		return;
	}

	createRecordPointsProfiles();

	%recordPointsDlg = new GuiWindowCtrl(RecordPointsDialog)
	{
		text = "Record points";
		position = "10 5";
		extent = "420 710";
		minExtent = "420 710";
		resizeWidth = "1";
		resizeHeight = "0";
		canMove = "1";
		canClose = "1";
		canMaximize = "0";
		canMinimize = "0";
		canHideOnFreelook = "0";
		canLock = "0";
		canSetup = "0";
		locked = "0";
		profile = "GuiWindowProfile";
		visible = "1";
		active = "1";
		isContainer = "1";
		closeCommand ="RecordPointsDialog.closeRecordPointsDialog();";
		centerPoint = "0 0 0";
		autoSaveRunning = false;
		replayIsRunning = false;

		new GuiTextCtrl()
		{
			text = "Center point: Not set";
			position = "12 40";
			extent = "300 30";
			profile = "RecordPoinsTextProfile";
			canHit = "false"; 
			visible = "1";
			internalName = "centerPointTxt";
		};

		new GuiButtonCtrl()
		{
			text = "Set";
			groupNum = "-1";
			buttonType = "PushButton";
			useMouseEvents = "0";
			horizSizing = "left";
			vertSizing = "top";
			position = "320 40";
			extent = "80 30";
			profile = "RecordPoinsBtnProfile";
			command ="RecordPointsDialog.setCurrentPosAsCenterRecordPoint();";
		};

		new GuiScrollCtrl(RecordPointsScrollCtrl) 
		{
			hScrollBar = "alwaysOff";
			position = "12 80";
			extent = "400 500";
			horizSizing = "width";
			vertSizing = "height";
			profile = "GuiScrollSkillInfoProfile";
			constantThumbHeight = true;
			childMargin = "0 7";
			trackOffset = 8;
			addContentWidth = 39;
			isContainer = "1";

			// background
			new GuiControl()
			{
				position = "0 0";
				extent = "400 500";
				visible = "1";
				active = "0";
				canHit = "0";
				profile = "RecordPoinsBackgroundProfile";
			};

			new GuiStackControl(RecordPointsStack)
			{
				position = "0 0";
				extent = "400 0"; //"100% 100%";
				//minExtent = "400 500";
				stackingType = "Vertical";
				vertStacking = "Top to Bottom";
				padding = 1;
				dynamicSize = "1";
				dynamicNonStackExtent = "0";
				changeChildPosition = "1";
				changeChildSizeToFit = "0";
			};
		};
		
		new GuiButtonCtrl()
		{
			text = "Add point";
			groupNum = "-1";
			buttonType = "PushButton";
			useMouseEvents = "0";
			position = "12 590";
			extent = "120 30";
			profile = "RecordPoinsBtnProfile";
			command ="RecordPointsDialog.addCurrentPlayerPosAsRecordPoint();";
		};

		new GuiButtonCtrl()
		{
			text = "Delete point";
			groupNum = "-1";
			buttonType = "PushButton";
			useMouseEvents = "0";
			position = "142 590";
			extent = "120 30";
			profile = "RecordPoinsBtnProfile";
			command ="RecordPointsDialog.deleteSelectedRecordPoint();";
		};

		new GuiButtonCtrl()
		{
			text = "Save points";
			groupNum = "-1";
			buttonType = "PushButton";
			useMouseEvents = "0";
			position = "272 590";
			extent = "120 30";
			profile = "RecordPoinsBtnProfile";
			command ="RecordPointsDialog.saveRecordPoints();";
		};

		new GuiButtonCtrl()
		{
			text = "Clear points";
			groupNum = "-1";
			buttonType = "PushButton";
			useMouseEvents = "0";
			position = "12 630";
			extent = "120 30";
			profile = "RecordPoinsBtnProfile";
			command ="RecordPointsDialog.clearRecordPoints();";
		};

		new GuiButtonCtrl()
		{
			text = "Go to point";
			groupNum = "-1";
			buttonType = "PushButton";
			useMouseEvents = "0";
			position = "142 630";
			extent = "120 30";
			profile = "RecordPoinsBtnProfile";
			command ="RecordPointsDialog.goToRecordPoint();";
		};

		new GuiButtonCtrl()
		{
			text = "Make spline"; // "Add Knot"; // "Run Autosave";
			groupNum = "-1";
			buttonType = "PushButton";
			useMouseEvents = "0";
			position = "12 670";
			extent = "120 30";
			profile = "RecordPoinsBtnProfile";
			command = "showRecordSplineKnotsDialog();"; // "RecordPointsDialog.addCurrentPositionAsKnot();";
		};

		// new GuiButtonCtrl()
		// {
		// 	text = "Make spline"; // "Stop Autosave";
		// 	groupNum = "-1";
		// 	buttonType = "PushButton";
		// 	useMouseEvents = "0";
		// 	position = "142 670";
		// 	extent = "120 30";
		// 	profile = "RecordPoinsBtnProfile";
		// 	command = "RecordPointsDialog.moveBySpline();"; // "RecordPointsDialog.stopAutoSavePoints();";
		// };

		new GuiButtonCtrl()
		{
			text = "Replay points";
			groupNum = "-1";
			buttonType = "PushButton";
			useMouseEvents = "0";
			position = "272 630";
			extent = "120 30";
			profile = "RecordPoinsBtnProfile";
			command ="RecordPointsDialog.replaySavePoints();";
			internalName = "replayAutoSaveButton";
		};
	};

	PlayGui.add(RecordPointsDialog);
}
//-----------------------------------------------------------------------------
function showRecordSplineKnotsDialog()
{
	if (!isObject(ServerConnection) || !isObject(ServerConnection.getControlObject()) || !ServerConnection.getControlObject().isInFlyingCameraMode())
	{
		echo("[RecordPoints] invalid player state");
		return;
	}

	if (!isObject(RecordPointsDialog))
	{
		echo("[RecordPoints] RecordPointsDialog not found");
		return;
	}

	if (isObject(RecordSplineKnotsDialog))
	{
		return;
	}


	%recordSplineKnotsDlg = new GuiWindowCtrl(RecordSplineKnotsDialog)
	{
		text = "Spline knots";
		position = "450 5";
		extent = "420 300";
		minExtent = "420 300";
		resizeWidth = "1";
		resizeHeight = "0";
		canMove = "1";
		canClose = "1";
		canMaximize = "0";
		canMinimize = "0";
		canHideOnFreelook = "0";
		canLock = "0";
		canSetup = "0";
		locked = "0";
		profile = "GuiWindowProfile";
		visible = "1";
		active = "1";
		isContainer = "1";
		closeCommand ="RecordSplineKnotsDialog.closeRecordSplineKnotsDialog();";

		new GuiScrollCtrl(RecordSplineKnotsScrollCtrl) 
		{
			hScrollBar = "alwaysOff";
			position = "12 40";
			extent = "400 200";
			horizSizing = "width";
			vertSizing = "height";
			profile = "GuiScrollSkillInfoProfile";
			constantThumbHeight = true;
			childMargin = "0 7";
			trackOffset = 8;
			addContentWidth = 39;
			isContainer = "1";

			// background
			new GuiControl()
			{
				position = "0 0";
				extent = "400 200";
				visible = "1";
				active = "0";
				canHit = "0";
				profile = "RecordPoinsBackgroundProfile";
			};

			new GuiStackControl(RecordSplineKnotsStack)
			{
				position = "0 0";
				extent = "400 0"; //"100% 100%";
				stackingType = "Vertical";
				vertStacking = "Top to Bottom";
				padding = 1;
				dynamicSize = "1";
				dynamicNonStackExtent = "0";
				changeChildPosition = "1";
				changeChildSizeToFit = "0";
			};
		};
		
		new GuiButtonCtrl()
		{
			text = "Add knot";
			groupNum = "-1";
			buttonType = "PushButton";
			useMouseEvents = "0";
			position = "12 250";
			extent = "120 30";
			profile = "RecordPoinsBtnProfile";
			command ="RecordPointsDialog.addCurrentPositionAsKnot();";
		};

		new GuiButtonCtrl()
		{
			text = "Delete knots";
			groupNum = "-1";
			buttonType = "PushButton";
			useMouseEvents = "0";
			position = "142 250";
			extent = "120 30";
			profile = "RecordPoinsBtnProfile";
			command ="RecordPointsDialog.deleteKnots();";
		};

		// new GuiButtonCtrl()
		// {
		// 	text = "Save points";
		// 	groupNum = "-1";
		// 	buttonType = "PushButton";
		// 	useMouseEvents = "0";
		// 	position = "272 590";
		// 	extent = "120 30";
		// 	profile = "RecordPoinsBtnProfile";
		// 	command ="RecordPointsDialog.saveRecordPoints();";
		// };

		// new GuiButtonCtrl()
		// {
		// 	text = "Clear points";
		// 	groupNum = "-1";
		// 	buttonType = "PushButton";
		// 	useMouseEvents = "0";
		// 	position = "12 630";
		// 	extent = "120 30";
		// 	profile = "RecordPoinsBtnProfile";
		// 	command ="RecordPointsDialog.clearRecordPoints();";
		// };

		// new GuiButtonCtrl()
		// {
		// 	text = "Go to point";
		// 	groupNum = "-1";
		// 	buttonType = "PushButton";
		// 	useMouseEvents = "0";
		// 	position = "142 630";
		// 	extent = "120 30";
		// 	profile = "RecordPoinsBtnProfile";
		// 	command ="RecordPointsDialog.goToRecordPoint();";
		// };

		// new GuiButtonCtrl()
		// {
		// 	text = "Add Knot"; // "Run Autosave";
		// 	groupNum = "-1";
		// 	buttonType = "PushButton";
		// 	useMouseEvents = "0";
		// 	position = "12 670";
		// 	extent = "120 30";
		// 	profile = "RecordPoinsBtnProfile";
		// 	command ="RecordPointsDialog.addCurrentPositionAsKnot();";
		// };

		new GuiButtonCtrl()
		{
			text = "Make spline";
			groupNum = "-1";
			buttonType = "PushButton";
			useMouseEvents = "0";
			position = "272 250";
			extent = "120 30";
			profile = "RecordPoinsBtnProfile";
			command = "RecordSplineKnotsDialog.moveBySpline();";
		};

		// new GuiButtonCtrl()
		// {
		// 	text = "Replay points";
		// 	groupNum = "-1";
		// 	buttonType = "PushButton";
		// 	useMouseEvents = "0";
		// 	position = "272 670";
		// 	extent = "120 30";
		// 	profile = "RecordPoinsBtnProfile";
		// 	command ="RecordPointsDialog.replaySavePoints();";
		// 	internalName = "replayAutoSaveButton";
		// };
	};

	PlayGui.add(RecordSplineKnotsDialog);

}
//-----------------------------------------------------------------------------
function GuiWindowCtrl::closeRecordPointsDialog(%this)
{
	if (isObject(RecordPointsDialog))
	{
		PlayGui.remove(RecordPointsDialog);
		RecordPointsDialog.safeDeleteObject();
	}

	if (isObject(RecordSplineKnotsDialog))
	{
		PlayGui.remove(RecordSplineKnotsDialog);
		RecordSplineKnotsDialog.safeDeleteObject();
		timeLapseClearKnots();
	}
}
//-----------------------------------------------------------------------------
function createRecordPointsProfiles()
{
	if (!isObject(RecordPoinsBtnProfile))
	{
		new GuiControlProfile(RecordPoinsBtnProfile: GuiBaseTextProfile)
		{
			fontSize = 20;		
			justify = "center";
			fontColor = "159 137 109";
			fontColorHL = "178 156 127";
			fontColorSEL= "151 143 132";
			fontColorNA= "121 123 112";

			border = "rect_fill";
			borderThickness = "1";
			borderColor = "64 64 64";
			borderColorHL = "64 64 64";
			borderColorNA = "34 34 34";

			fillColor = "10 10 10";
			fillColorHL = "32 32 32";
			fillColorSEL = "64 64 64";
			fillColorNA = "34 34 34";
		};
	}

	if (!isObject(RecordPoinsTextProfile))
	{
		new GuiControlProfile(RecordPoinsTextProfile: GuiBaseTextProfile)
		{
			fontSize = 16;		
			fontColor = "159 137 109";
		};
	}

	if (!isObject(RecordPoinsBackgroundProfile))
	{
		new GuiControlProfile(RecordPoinsBackgroundProfile: GuiBaseTextProfile)
		{
			opaque = "1";
			fillColor = "0 0 0";
			border = "rect1_color";
			borderColor = "0 0 0";
		};
	}

	if (!isObject(RecordPoinsSelectionListButtonsProfile))
	{
		new GuiControlProfile(RecordPoinsSelectionListButtonsProfile: GuiBaseTextProfile)
		{
			fontSize = "16";
			fontColor = "159 137 109";
			fontColorSEL = "159 137 109";
			fontColorHL = "159 137 109";

			fillColor = "0 0 0";
			fillColorHL = "32 32 32";
			fillColorSEL = "64 64 64";
		};
	}

}
//-----------------------------------------------------------------------------
function deleteRecordPointsProfiles()
{
	if (isObject(RecordPoinsBtnProfile))
	{
		RecordPoinsBtnProfile.safeDeleteObject();
	}

	if (isObject(RecordPoinsTextProfile))
	{
		RecordPoinsTextProfile.safeDeleteObject();
	}

	if (isObject(RecordPoinsSelectionListButtonsProfile))
	{
		RecordPoinsSelectionListButtonsProfile.safeDeleteObject();
	}

}
//-----------------------------------------------------------------------------
function RecordPointsDialog::addCurrentPlayerPosAsRecordPoint(%this) // %dialogStack)
{
	if (!isObject(RecordPointsDialog))
	{
		return;
	}

	%playerPos = ServerConnection.getControlObject().getPosition();
	%cameraRotation = ServerConnection.getControlObject().getFlyingCameraRotation();
	addPlayerPosAndCameraRotationAsPoint(RecordPointsStack, %playerPos, %cameraRotation);
}
//-----------------------------------------------------------------------------
function addPlayerPosAndCameraRotationAsPoint(%dialogStack, %pos, %rot)
{

	%newRecordPoint = new GuiButtonCtrl()
	{
		position = "0 0";
		extent = %dialogStack.extent.x @ " 25";
		profile = "RecordPoinsSelectionListButtonsProfile";
		buttonType = "RadioButton";
		text = "Position: " @ getRecordPointText(%pos) @ " Rotation: " @ getRecordPointText(%rot);
		recordPoint = %pos;
		recordRotation = %rot;
	};

	%dialogStack.add(%newRecordPoint);
}
//-----------------------------------------------------------------------------
function GuiWindowCtrl::deleteSelectedRecordPoint(%this)
{
	if (!isObject(RecordPointsDialog))
	{
		return;
	}

	for($i=0; $i<RecordPointsStack.getCount(); $i++) 
	{
		%selectedItem = RecordPointsStack.getObject($i);
		if (%selectedItem.defaultState == true)
		{
			RecordPointsStack.remove(%selectedItem);
			return;
		}
	}
}
//-----------------------------------------------------------------------------
function GuiWindowCtrl::saveRecordPoints(%this)
{
	if (!isObject(RecordPointsDialog))
	{
		return;
	}

	%recordPoints = new ArrayObject();

	for($i=0; $i<RecordPointsStack.getCount(); $i++) 
	{
		%selectedItem = RecordPointsStack.getObject($i);
		%recordPoints.push_back(%selectedItem.recordPoint, %selectedItem.recordRotation);
	}

	saveRecordPointsToXml("screenshots/recordPoints.xml", RecordPointsDialog.centerPoint, %recordPoints);
}
//-----------------------------------------------------------------------------
function GuiWindowCtrl::clearRecordPoints(%this)
{
	if (!isObject(RecordPointsDialog))
	{
		return;
	}

	RecordPointsStack.clear();
}
//-----------------------------------------------------------------------------
function GuiWindowCtrl::goToRecordPoint(%this)
{
	if (!isObject(RecordPointsDialog))
	{
		return;
	}

	for($i=0; $i<RecordPointsStack.getCount(); $i++) 
	{
		%selectedItem = RecordPointsStack.getObject($i);
		if (%selectedItem.defaultState == true)
		{
			movePlayerToRecordPoint(RecordPointsDialog.centerPoint, %selectedItem.recordPoint, %selectedItem.recordRotation);	
			return;
		}
	}

}
//-----------------------------------------------------------------------------
function GuiWindowCtrl::setCurrentPosAsCenterRecordPoint(%this)
{
	if (!isObject(RecordPointsDialog))
	{
		return;
	}
	RecordPointsDialog.centerPoint = ServerConnection.getControlObject().getPosition();
	RecordPointsDialog-->centerPointTxt.setText("Center point: " @ getRecordPointText(RecordPointsDialog.centerPoint));
}
//-----------------------------------------------------------------------------
// function GuiWindowCtrl::runAutoSavePoints(%this)
// {
// 	if (!isObject(RecordPointsDialog))
// 	{
// 		return;
// 	}
// 	RecordPointsDialog.autoSaveRunning = true;
// 	schedule($cm_config::timeLapseCamera::autoSavePointsInterval, 0, "nextStepAutoSavePoints");
// }
//-----------------------------------------------------------------------------
function GuiWindowCtrl::stopAutoSavePoints(%this)
{
	if (!isObject(RecordPointsDialog))
	{
		return;
	}
	RecordPointsDialog.autoSaveRunning = false;
}
//-----------------------------------------------------------------------------
function GuiWindowCtrl::replaySavePoints(%this)
{
	if (!isObject(RecordPointsDialog))
	{
		return;
	}

	if (RecordPointsDialog.replayIsRunning)
	{
		RecordPointsDialog.replayIsRunning = false;		
	}
	else
	{
		RecordPointsDialog.replayIsRunning = true;
		RecordPointsDialog-->replayAutoSaveButton.text = "Stop Replay";

		for ($i = 0; $i < RecordPointsStack.getCount(); $i++)
		{
			%item = RecordPointsStack.getObject($i);
			%item.defaultState = false;
		}

		RecordPointsDialog.schedule($cm_config::timeLapseCamera::autoReplayPointsInterval, "nextStepReplaySavePoints", 0);
	}
}
//-----------------------------------------------------------------------------
function GuiWindowCtrl::nextStepReplaySavePoints(%this, $i)
{
	if (!isObject(RecordPointsDialog))
	{
		return;
	}

	if ($i >= RecordPointsStack.getCount() || RecordPointsDialog.replayIsRunning == false)
	{
		RecordPointsDialog-->replayAutoSaveButton.text = "Replay Points";
		RecordPointsDialog.replayIsRunning = false;
		return;
	}


	if ($i > 0)
	{
		%prevSelectedItem = RecordPointsStack.getObject($i - 1);
		%prevSelectedItem.defaultState = false;
	}

	%selectedItem = RecordPointsStack.getObject($i);
	%selectedItem.defaultState = true;
	movePlayerToRecordPoint(RecordPointsDialog.centerPoint, %selectedItem.recordPoint, %selectedItem.recordRotation);
	RecordPointsDialog.schedule($cm_config::timeLapseCamera::autoReplayPointsInterval, "nextStepReplaySavePoints", $i + 1);
}
//-----------------------------------------------------------------------------
// function nextStepAutoSavePoints()
// {
// 	if (!isObject(RecordPointsDialog))
// 	{
// 		return;
// 	}

// 	if (RecordPointsDialog.autoSaveRunning == false)
// 	{
// 		return;
// 	}

// 	addCurrentPlayerPosAsRecordPoint(RecordPointsStack);
// 	schedule($cm_config::timeLapseCamera::autoSavePointsInterval, 0, "nextStepAutoSavePoints");
// }
//-----------------------------------------------------------------------------
function getRecordPointText(%pt)
{
	return 
		"("
		@ strformat("%.2f", %pt.x) @ "; "
		@ strformat("%.2f", %pt.y) @ "; "
		@ strformat("%.2f", %pt.z) @ ")";
}
//-----------------------------------------------------------------------------
function GuiWindowCtrl::addCurrentPositionAsKnot(%this)
{
	if (!isObject(RecordSplineKnotsDialog))
	{
		return;
	}

	%playerPos = ServerConnection.getControlObject().getPosition();
	%cameraRotation = ServerConnection.getControlObject().getFlyingCameraRotation();
	addPlayerPosAndCameraRotationAsPoint(RecordSplineKnotsStack, %playerPos, %cameraRotation);
	timeLapseAddKnot();
}
//-----------------------------------------------------------------------------
function GuiWindowCtrl::deleteKnots(%this)
{
	if (!isObject(RecordSplineKnotsDialog))
	{
		return;
	}

	RecordSplineKnotsStack.clear();
	timeLapseClearKnots();
}
//-----------------------------------------------------------------------------
function GuiWindowCtrl::moveBySpline(%this)
{
	if (!isObject(RecordPointsDialog) || !isObject(RecordSplineKnotsDialog))
	{
		return;
	}

	runMoveBySpline(0);
}
//-----------------------------------------------------------------------------
function runMoveBySpline($index)
{
	if (!isObject(RecordPointsDialog))
	{
		return;
	}

	//echo("---------------------------------- index: " @ $index);

	if ($index >= $cm_config::timeLapseCamera::spinePointsCount * (timeLapseGetSplineKnotsCount() - 1))
	{
		echo("[Timelapse] spline is all");
		return;
	}

	$splineParam = $index / $cm_config::timeLapseCamera::spinePointsCount;
	//echo("---------------------------------- splineParam: " @ $splineParam);

	%playerPos = timeLapsePositionOnSpline($splineParam);
	%cameraRot = timeLapseRotationOnSpline($splineParam);

	addPlayerPosAndCameraRotationAsPoint(RecordPointsStack, %playerPos, %cameraRot);
	movePlayerToRecordPoint(RecordPointsDialog.centerPoint, %playerPos, %cameraRot);	
	schedule($cm_config::timeLapseCamera::autoReplayPointsInterval, 0, "runMoveBySpline", $index + 1);
}

function RecordSplineKnotsDialog::closeRecordSplineKnotsDialog(%this)
{
	if (isObject(RecordSplineKnotsDialog))
	{
		PlayGui.remove(RecordSplineKnotsDialog);
		RecordSplineKnotsDialog.safeDeleteObject();
		timeLapseClearKnots();
	}
}

$cm_config::timeLapseCamera::autoSavePointsInterval = 100;
$cm_config::timeLapseCamera::autoReplayPointsInterval = 500;
$cm_config::timeLapseCamera::spinePointsCount = 10;